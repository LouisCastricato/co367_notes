=LEC1= 2018-09-07
_CH0-Introduction_

 Mathematical Optimization or Mathematic Programming
  Informally: Find a best solution to the model of a problem
   *best* according to a given objective/criterion
 
 Applications
  Operations Research
   Scheduling + Planning
   Supply Chain Management
   Vehicular Routing
   Power Grid Optimization
  Statistics & Machine Learning
   Curve Fitting
   Classification, Clustering, SVM, ...
   Deep Learning
  Finance
  Optimal Control
  Biology
 
 
 (OPT) min f(x)
  s.t. g_i(x) ≤ 0, for i ∈ {1, 2, 3, ..., m}
  x ∈ R
 
 Remarks:
  a. max f(x) = -(min -f(x))
  b. {x ∈ Rⁿ: g(x) ≥ 0} = {x ∈ Rⁿ: -g(x) ≤ 0}
  c. {x ∈ Rⁿ: g(x) ≥ b} = {x ∈ Rⁿ: -g(x) - b ≤ 0}
 
 A. Classification of Solutions
  defn Open Ball:
   the open ball of radius δ around x_bar is B_δ(x_bar) = {x ∈ Rⁿ: ‖x - x_bar‖ ≤ δ}
 
  defn Minimizer:
   Consider f: D → R. The point x* ∈ D is
    a global minimizer for f on D if 
     f(x*) ≤ f(x), ∀x ∈ D
 
    a strict global minimizer for f on D if 
     f(x*) < f(x), ∀x ∈ D, x ≠ x*
    
    a local minimizer for f on D if
     ∃δ > 0: f(x*) ≤ f(x), ∀x ∈ B_δ(x*) ∩ D
 
    a strict local minimizer for f on D if
     ∃δ > 0: f(x*) < f(x), ∀x ∈ B_δ(x*) ∩ D, x ≠ x*
 
 B. Classification of Problems - 1
  a. if f(x) = 0 ∀x ∈ Rⁿ ⇒ (OPT) is a feasibility problem
  b. if we have m = 0 constractins ⇒ (OPT) is an unconstrained optimization problem
 
 C. Classification of Problems - 2
  Q: why do we need f and g?
  A: in the absence of hypotheses on f and g, (OPT) is unsolvable
 
  Note: "Black box" optimization framework
  All that is given is an oracle function that can compute values of f(x) for any x 
   (and possibly some extensions to compute derivatives)

 Example: solve 
  min f(x)
  s.t. x ∈ R
  f(x) := 0 when x = λ
  f(x) := 1 otherwise

=LEC2= 2018-09-10
 Example: consider
  min f(x)
  s.t. g(x) ≤ 0, for i ∈ [1, m]
       h(x) ≤ 0
  h(x) when x in Zⁿ, do: 0
  h(x), do: 1

  in other words, we only want integral solutions
 
 defn Discrete Optimization
  When the constraints of (OPT) restrict to a lattice, we have a discrete optimization problem


 defn Continuous
  A function f: D → R is continuous over D 
  if ∀ε > 0, ∃δ > 0 s.t. |x - y| < δ ⇒ |f(x) - f(y)| < ε, ∀x, y ∈ D

 defn Smooth
  A function f: D → R is Cᵏ smooth over D (f ∈ Cᵏ(D)) 
  if all its kth derivatives are continuous over D

 f(x) when x >= 2, do: 1
 f(x), do: -1
  f(x) is discontinous

 g(x), do: abs(x - 2)
  g(x) ∈ C⁰

 h(x) when x >= 2, do: 1/2 (x-2) ^ 2
 h(x), do: 1/2 (2-x) ^ 2
  h(x) ∈ C¹

 defn Gradient
  Let f ∈ C¹(D) for D ⊆ Rⁿ. The gradient is
   ∇f: D → Rⁿ
   if satisfies ∇f ∈ C⁰(D) and is given by ∇f(x) = [δf/δx_1(x), ..., δf/δx_n(x)]~

 defn Hessian
  Let f ∈ C²(D) for D ⊆ Rⁿ. Its Hessian is
   ∇²f: D → Rⁿ
   It satisfies ∇²f ∈ C⁰(D) and is given by ∇²f = 
     | δf(x)/δx_1δx_1 ... δf(x)/δx_nδx_1 |
     | ...            ...            ... |
     | δf(x)/δx_1δx_n ...  δf(x)/δx_nδx_n|

 defn Linear
  A function f: D → R, D ⊆ Rⁿ is linear 
  if ∃c ∈ Rⁿ where f(x) = c~x, ∀x ∈ D
  Then ∇f(x) = c and ∇²f(x) = [0] for all x ∈ D

 remark: if f, g_i are linear, then (OPT) is a linear programming function
